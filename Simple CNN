{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/fauziya24/sports-image-classification-using-cnn?scriptVersionId=173769413\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"9ce515ea","metadata":{"papermill":{"duration":0.003057,"end_time":"2024-04-24T16:55:26.219436","exception":false,"start_time":"2024-04-24T16:55:26.216379","status":"completed"},"tags":[]},"source":["#### Project Overview:\n","The project aims to develop a Convolutional Neural Network (CNN) model for image classification using TensorFlow and Keras. The dataset consists of images labeled with one of seven classes. The project involves data preprocessing, model building, training, and evaluation.\n","\n","#### Libraries Used:\n","- **Pandas**: For data manipulation and handling CSV files.\n","- **NumPy**: For numerical operations.\n","- **TensorFlow & Keras**: For building and training the CNN model.\n","- **ImageDataGenerator**: For real-time data augmentation and loading images in batches during training.\n","\n","#### Data:\n","- **Training and Testing Data**: Loaded from CSV files (`train.csv` and `test.csv`).\n","- **Image Dimensions**: Images are resized to `(224, 224)` pixels.\n","- **Batch Size**: Set to `32`.\n","- **Data Augmentation**:\n","  - Training data:\n","    - Normalization of pixel values to `[0,1]`.\n","    - `20` degrees random rotation.\n","    - `0.2` horizontal and vertical shift.\n","    - Horizontal flip.\n","  - Testing data:\n","    - Only pixel value normalization.\n","\n","#### Model Architecture:\n","- **Input Shape**: `(224, 224, 3)` - RGB images.\n","- **Layers**:\n","  - Convolutional layers:\n","    - `Conv2D` with `ReLU` activation.\n","    - `MaxPooling2D` for downsampling.\n","  - Followed by:\n","    - `Flatten` layer to flatten the 2D array to a 1D array.\n","    - `Dense` layers with `ReLU` activation.\n","    - `Dropout` layer to prevent overfitting.\n","    - Final `Dense` layer with `softmax` activation for multi-class classification (7 classes).\n","\n","#### Model Compilation:\n","- **Optimizer**: Adam optimizer.\n","- **Loss Function**: Categorical Crossentropy.\n","- **Metrics**: Accuracy.\n","\n","#### Training:\n","- **Epochs**: `5`.\n","- **Training**:\n","  - Using `train_data` with augmented images.\n","  - Validation using `valid_data`.\n","  - `fit` function used to train the model.\n","\n","#### Evaluation:\n","- The model's training progress and performance on the validation set are stored in `history`.\n","- Metrics like loss and accuracy are monitored to assess model performance.\n","\n","#### Summary:\n","This project follows a standard workflow for image classification:\n","1. Data loading and preprocessing.\n","2. Building a CNN model.\n","3. Compiling the model with appropriate optimizer and loss.\n","4. Training the model with augmented data.\n","5. Evaluating the model's performance using validation data.\n","\n","The CNN model is designed to learn features from the images through convolutional layers, downsample with pooling layers, and make predictions using fully connected layers. The use of data augmentation helps in generalizing the model by exposing it to variations of the training data. The model's performance can be analyzed through the `history` object to make decisions on further training or adjustments to the architecture."]},{"cell_type":"code","execution_count":1,"id":"aad659a4","metadata":{"execution":{"iopub.execute_input":"2024-04-24T16:55:26.226672Z","iopub.status.busy":"2024-04-24T16:55:26.226277Z","iopub.status.idle":"2024-04-24T17:31:45.032456Z","shell.execute_reply":"2024-04-24T17:31:45.031258Z"},"papermill":{"duration":2178.874966,"end_time":"2024-04-24T17:31:45.097237","exception":false,"start_time":"2024-04-24T16:55:26.222271","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-04-24 16:55:29.226655: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-04-24 16:55:29.226789: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-04-24 16:55:29.391790: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]},{"name":"stdout","output_type":"stream","text":["Found 6582 validated image filenames belonging to 7 classes.\n","Found 1645 validated image filenames belonging to 7 classes.\n","Found 0 validated image filenames.\n"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:920: UserWarning: Found 2056 invalid image filename(s) in x_col=\"image_ID\". These filename(s) will be ignored.\n","  warnings.warn(\n","/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m419s\u001b[0m 2s/step - accuracy: 0.2668 - loss: 2.0091 - val_accuracy: 0.4201 - val_loss: 1.4562\n","Epoch 2/5\n","\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m434s\u001b[0m 2s/step - accuracy: 0.4414 - loss: 1.4548 - val_accuracy: 0.5672 - val_loss: 1.1325\n","Epoch 3/5\n","\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 2s/step - accuracy: 0.5511 - loss: 1.2491 - val_accuracy: 0.6097 - val_loss: 1.0710\n","Epoch 4/5\n","\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m441s\u001b[0m 2s/step - accuracy: 0.5951 - loss: 1.1319 - val_accuracy: 0.6419 - val_loss: 0.9637\n","Epoch 5/5\n","\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m441s\u001b[0m 2s/step - accuracy: 0.6155 - loss: 1.0862 - val_accuracy: 0.6614 - val_loss: 0.9083\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Set data_format to 'channels_last' explicitly\n","tf.keras.backend.set_image_data_format('channels_last')\n","\n","# Load train and test CSV files\n","train_csv = \"/kaggle/input/sports-image-classification/dataset/train.csv\"\n","test_csv = \"/kaggle/input/sports-image-classification/dataset/test.csv\"\n","\n","train_df = pd.read_csv(train_csv)\n","test_df = pd.read_csv(test_csv)\n","\n","# Image dimensions and other parameters\n","IMAGE_SHAPE = (224, 224)\n","BATCH_SIZE = 32\n","EPOCHS = 5\n","\n","# Data Generators\n","train_datagen = ImageDataGenerator(\n","    rescale=1./255,  # Normalize pixel values to [0,1]\n","    validation_split=0.2,  # Split data for validation\n","    rotation_range=20,  # Randomly rotate images\n","    width_shift_range=0.2,  # Randomly shift images horizontally\n","    height_shift_range=0.2,  # Randomly shift images vertically\n","    horizontal_flip=True  # Randomly flip images horizontally\n",")\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)  # Only rescale for test data\n","\n","train_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    directory=\"/kaggle/input/sports-image-classification/dataset/train\",\n","    x_col='image_ID',\n","    y_col='label',\n","    target_size=IMAGE_SHAPE,\n","    batch_size=BATCH_SIZE,\n","    class_mode='categorical',  # Multi-class classification\n","    shuffle=True,\n","    subset='training'  # Use training subset\n",")\n","\n","valid_data = train_datagen.flow_from_dataframe(\n","    dataframe=train_df,\n","    directory=\"/kaggle/input/sports-image-classification/dataset/train\",\n","    x_col='image_ID',\n","    y_col='label',\n","    target_size=IMAGE_SHAPE,\n","    batch_size=BATCH_SIZE,\n","    class_mode='categorical',  # Multi-class classification\n","    shuffle=True,\n","    subset='validation'  # Use validation subset\n",")\n","\n","test_data = test_datagen.flow_from_dataframe(\n","    dataframe=test_df,\n","    directory=\"/kaggle/input/sports-image-classification/dataset/kaggle/input/sports-image-classification/dataset/train\",\n","    x_col='image_ID',\n","    target_size=IMAGE_SHAPE,\n","    batch_size=BATCH_SIZE,\n","    class_mode=None,  # No labels in test data, only for prediction\n","    shuffle=False\n",")\n","\n","# Simple CNN model\n","model = Sequential([\n","    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(64, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Conv2D(128, (3, 3), activation='relu'),\n","    MaxPooling2D((2, 2)),\n","    Flatten(),\n","    Dense(128, activation='relu'),\n","    Dropout(0.5),\n","    Dense(7, activation='softmax')  # 7 classes\n","])\n","\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Train the model\n","history = model.fit(\n","    train_data,\n","    epochs=EPOCHS,\n","    validation_data=valid_data\n",")\n","\n"]},{"cell_type":"code","execution_count":2,"id":"ffaf043f","metadata":{"execution":{"iopub.execute_input":"2024-04-24T17:31:45.246317Z","iopub.status.busy":"2024-04-24T17:31:45.245926Z","iopub.status.idle":"2024-04-24T17:31:45.253967Z","shell.execute_reply":"2024-04-24T17:31:45.252922Z"},"papermill":{"duration":0.084705,"end_time":"2024-04-24T17:31:45.256025","exception":false,"start_time":"2024-04-24T17:31:45.17132","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<keras.src.legacy.preprocessing.image.DataFrameIterator at 0x7e30de8ddfc0>"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["test_data"]},{"cell_type":"code","execution_count":null,"id":"767fab1f","metadata":{"papermill":{"duration":0.07203,"end_time":"2024-04-24T17:31:45.399604","exception":false,"start_time":"2024-04-24T17:31:45.327574","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"c4c01006","metadata":{"papermill":{"duration":0.07561,"end_time":"2024-04-24T17:31:45.546534","exception":false,"start_time":"2024-04-24T17:31:45.470924","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":3,"id":"75e1edd2","metadata":{"execution":{"iopub.execute_input":"2024-04-24T17:31:45.69006Z","iopub.status.busy":"2024-04-24T17:31:45.689672Z","iopub.status.idle":"2024-04-24T17:31:45.969536Z","shell.execute_reply":"2024-04-24T17:31:45.968368Z"},"papermill":{"duration":0.35471,"end_time":"2024-04-24T17:31:45.972068","exception":false,"start_time":"2024-04-24T17:31:45.617358","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"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/1atIlWOWnmkklMAKg8Wy3l3RZmpf//+GIbB559/TqdOnfjf//7Hyy+/DDgnkPzmm2/497//TePGjfH39+fGG2+ksPAMl5iexe7du7nuuusYO3YszzzzDDVr1uTHH3/ktttuo7CwkICAAPz9zzznxtmeA1wDmf86g0NR0en35vH398dyylUgo0eP5tChQ7zyyivExMTg6+tL165dXed5ru8NzlagWbNm8cgjjzB//nzGjBlz2vcR8Thq5RE3owDkQfz8/LjhhhtYtGgR27dvp1mzZnTo0AFwDki+9dZbGTRoEOC8hciJAcVllZCQgMPh4KWXXnKFlQ8++KDENrGxscTHxzN16tTT9m/SpAn+/v7Ex8dz++23n/b8iUktDx48SI0aNQBny835WL16Na+//jr9+vUDYN++fWRkZJSoKzk5mT///POMrUAjRoxg4sSJvPrqq2zatMnVTSficdTKI25MAcjDDB8+nOuuu46NGzcyYsQI1/omTZrw8ccf079/fywWC48//vhpV4ydr8aNG1NUVMRrr71G//79Wb16NbNnzy6xzaRJk2jTpg333HMPd999Nz4+Pnz//ffcdNNNhIaG8vDDDzNx4kR8fHy49NJLSU9PZ+PGjdx22200btyY6OhonnjiCZ555hn+/PNPXnrppfOqrUmTJixYsICOHTuSlZXFv/71rxKtPldccQWXX345gwcPZvr06TRu3JgtW7ZgsVjo06cP4BxPdcMNN/Cvf/2La665hrp1617Q/5OI21Erj1Qhun7Qw/To0YOaNWuydetWbrnlFtf66dOnU6NGDbp160b//v3p3bu3q3WorNq2bcv06dN5/vnnad26NYsWLXLdz+2Epk2b8vXXX7Nu3To6d+5M165d+fTTT/Hycmbyxx9/nH/+859MnjyZFi1aMGTIENLS0gDw9vbm/fffZ8uWLcTGxvL888/z9NNPn1dtb731FkeOHKFDhw6MHDmS+++/n7CwsBLbfPTRR3Tq1Ilhw4bRsmVLJk6c6Lo67YQT3Xn/+Mc/Luj/SMRt5GbAuiXw0e3OS9Tf6gWrnocDiYDhbOXp/iCM+RIm7oCb34UOIxV+pNLTrTBKoVthyLksWLCABx98kAMHDuDj43PWbfUzI25FrTzixnQrDJGLJC8vj4MHD/Lcc89x1113nTP8iLgFjeURD6QAJGW2aNEi7rrr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Y8dy6NChM247bdo0goODXY/o6OgLOyGzZKfAh2PAcEDsUOeNTuWMFv26l6UJyVgt8NqwDtStEWB2SSIiUsFMDUAZGRnY7XbCw0teoh0eHk5KSkqp+/z444+89dZbzJ0794zH7dOnD++++y7x8fE8//zzrFq1ir59+2K320vdftKkSWRmZroe+/btu/CTqmj2Ylh6G+SmQVhLuG46qCvnjBL2HGHqfzcCMLFPc7o3CTW5IhERMYNbzYyXnZ3NyJEjmTt3LqGhZ/7gGjp0qGu5TZs2xMbG0qhRI1auXEnPnj1P297X1xdfX9+LUvNF9/3TsOdH8KnmHPfjE2h2RZVWWnY+YxcmUGQ36NcmgrsuL737VEREqj5TA1BoaCg2m43U1NQS61NTU4mIiDht+x07drB792769+/vWudwOADw8vJi69atNGrU6LT9GjZsSGhoKNu3by81ALmtrV/Cjy87l69/DUKbmFtPJVZkd3DvokTSsgtoElaNF25sq0HPIiIezNQuMB8fH+Li4oiPj3etczgcxMfH07Vr19O2b968ORs2bCApKcn1uP7667nqqqtISko649id5ORkDh06RGRk5EU7lwp3eBd8cpdzucvd0PoGc+up5J75fDO/7T5CdV8v5oyMo5qvWzV+iohIOTP9U2DChAmMHj2ajh070rlzZ2bMmEFubi5jxowBYNSoUdSpU4dp06bh5+dH69atS+wfEhIC4Fqfk5PD1KlTGTx4MBEREezYsYOJEyfSuHFjevfuXaHndtEU5cOHoyE/E+p2gqufMruiSu3jxGTe/mk3ANOHtKNh7WrmFiQiIqYzPQANGTKE9PR0Jk+eTEpKCu3atWPFihWugdF79+7FWobJ/Gw2G+vXr+edd97h6NGjREVFcc011/DUU0+57zifU614BA6uA/+acNPb4OVjdkWV1h/7M5n08QYA7u/RmKtb6p5oIiICFsMwDLOLqGyysrIIDg4mMzOToKAgs8spad3i411fFhixFBr3OucunupIbiH9Z/5I8pFjXNmsNm+N7oTNqnE/IiJVVVk+v02fCFHKIHUT/He8c/mKhxV+zsLuMLh/8VqSjxyjXs0AXhnSXuFHRERcFIDcRUE2fDASio9Box5wxUSzK6rUpn+zlf9ty8DP28qckXEEB3ibXZKIiFQiCkDuwDBg+X1waDsE1YEb5oJVt244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xMTEGD4+Pkbt2rWNnj17usKBYbj362cYZT8/d3v9SnNqAKosr6HFMAzj4rYxiYiIiFQuGgMkIiIiHkcBSERERDyOApCIiIh4HAUgERER8TgKQCIiIuJxFIBERETE4ygAiYiIiMdRABIRERGPowAkInIeLBYLy5YtM7sMESknCkAiUundeuutWCyW0x59+vQxuzQRcVNeZhcgInI++vTpw/z580us8/X1NakaEXF3agESEbfg6+tLREREiUeNGjUAZ/fUG2+8Qd++ffH396dhw4YsXbq0xP4bNmygR48e+Pv7U6tWLe68805ycnJKbDNv3jxatWqFr68vkZGRjBs3rsTzGRkZDBo0iICAAJo0acLy5csv7kmLyEWjACQiVcLjjz/O4MGDWbduHcOHD2fo0KFs3rwZgNzcXHr37k2NGjX47bff+PDDD/n2229LBJw33niDe++9lzvvvJMNGzawfPlyGjduXOJ7TJ06lZtvvpn169fTr18/hg8fzuHDhyv0PEWknFz0+82LiPxNo0ePNmw2mxEYGFji8cwzzxiGYRiAcffdd5fYp0uXLsbYsWMNwzCMN99806hRo4aRk5Pjev7zzz83rFarkZKSYhiGYURFRRmPPvroGWsAjMcee8z1dU5OjgEYX375Zbmdp4hUHI0BEhG3cNVVV/HGG2+UWFezZk3XcteuXUs817VrV5KSkgDYvHkzbdu2JTAw0PX8pZdeisPhYOvWrVgsFg4cOEDPnj3PWkNsbKxrOTAwkKCgINLS0i70lETERApAIuIWAgMDT+uSKi/+/v7ntZ23t3eJry0WCw6H42KUJCIXmcYAiUiV8Msvv5z2dYsWLQBo0aIF69atIzc31/X86tWrsVqtNGvWjOrVq1O/fn3i4+MrtGYRMY9agETELRQUFJCSklJinZeXF6GhoQB8+OGHdOzYke7du7No0SLWrFnDW2+9BcDw4cOZMmUKo0eP5oknniA9PZ377ruPkSNHEh4eDsATTzzB3XffTVhYGH379iU7O5vVq1dz3333VeyJikiFUAASEbewYsUKIiMjS6xr1qwZW7ZsAZxXaC1evJh77rmHyMhI3n//fVq2bAlAQEAAX331FQ888ACdOnUiICCAwYMHM336dNexRo8eTX5+Pi+//DIPPfQQoaGh3HjjjRV3giJSoSyGYRhmFyEi8ndYLBY++eQTBg4caHYpIuImNAZIREREPI4CkIiIiHgcjQESEbennnwRKSu1AImIiIjHUQASERERj6MAJCIiIh5HAUhEREQ8jgKQiIiIeBwFIBEREfE4CkAiIiLicRSARERExOP8P2zBJo9IkwnUAAAAAElFTkSuQmCC","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot training history\n","import matplotlib.pyplot as plt\n","\n","plt.plot(history.history['accuracy'], label='accuracy')\n","plt.plot(history.history['val_accuracy'], label='val_accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"id":"2a0b6e37","metadata":{"papermill":{"duration":0.072745,"end_time":"2024-04-24T17:31:46.119196","exception":false,"start_time":"2024-04-24T17:31:46.046451","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":1972590,"sourceId":3255301,"sourceType":"datasetVersion"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":2184.269917,"end_time":"2024-04-24T17:31:47.718429","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-04-24T16:55:23.448512","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}